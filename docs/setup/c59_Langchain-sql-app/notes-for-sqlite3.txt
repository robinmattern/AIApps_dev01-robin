

          import { SqlDatabase } from "langchain/sql_db";
          import { DataSource  } from "typeorm";

        //      console.log( "import.meta.url:",   import.meta.url.replace( import.meta.url.replace( /.+\//, "/" ), "" ) )
          var __dirname = import.meta.url.replace( import.meta.url.replace( /.+\//, "/" ), "" ).replace( /file:\/\//, "" ) // .replace( /:/, "" )
            var aAppDir = __dirname.replace(/\/E:/, "")

        // try {
                console.log( '\n1-main[0.1]    Loading SQLite3 database: ' + `./assets/chinook.db` );

          const datasource = new DataSource(
                 { type: "sqlite"
        //       , database: `${aAppDir}/assets/chinook.db`     // .(40201.91.1 RAM Was ../../../../Chinook.db)
                 , database: `./assets/chinook.db`              // .(40201.91.1 RAM Was ../../../../Chinook.db)
                   } );
          const db = await SqlDatabase.fromDataSourceParams(
                 { appDataSource: datasource
                   } );

                console.log( db.allTables.map( (t) => t.tableName ) );

---------------

    - I have install these dependencies: {
            "@langchain/community": "^0.0.24",
            "@langchain/openai": "^0.0.13",
            "langchain": "^0.1.11",
            "sqlite3": "^5.1.7",
            "typeorm": "^0.3.20"
             },

    - Here is the code to load the SQLite database that I downloaded from
      https://www.sqlitetutorial.net/wp-content/uploads/2018/03/chinook.zip

          import { SqlDatabase } from "langchain/sql_db";
          import { DataSource  } from "typeorm";

          const datasource = new DataSource(
                 { type: "sqlite"
                 , database: `./assets/chinook.db`
                   } );
          const db = await SqlDatabase.fromDataSourceParams(
                 { appDataSource: datasource
                   } );

                console.log( db.allTables.map( (t) => t.tableName ) );

    - But it is not loading any tables

----------------
ormconfig.json
{
  "type": "sqlite",
  "database": "./assets/chinook.db",
  "entities": [], // Not needed for your simple script
  "synchronize": false // Don't attempt schema synchronization
}

https://www.sqlite.org/download.html



So I downloaded and unzipped sqlit3 and then added it's location to the system PATH
I was able to confirm that I could access the chinook.db, as follows

    `# sqlite3 ./assets/chinook.db`

        SQLite version 3.45.1 2024-01-30 16:01:20 (UTF-16 console I/O)
        Enter ".help" for usage hints.
        sqlite> .tables
        albums          employees       invoices        playlists
        artists         genres          media_types     tracks
        customers       invoice_items   playlist_track
        sqlite> .exit

But even with a ormconfig.json file you suggested, it still doesn't load any tables in the Node.js script

----

I have checked

    datasource.isConnected -> true, but datasource.driver.attachdatabases == { } is empty

And I've used a full path to the chinook.db in both the ormconfig.json file and in

    const datasource = new DataSource(
           { type: "sqlite"
           , database: "/Repos/Robin/AIApps_/dev01-robin/client5/5c1_langchain-sql-app/assets/chinook.db"
             } );

Should I be using a Windows path with \\s




  sqlite> SELECT * FROM sqlite_master WHERE type = 'table';

  table|albums|albums|2|CREATE TABLE "albums"
  (
      [AlbumId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
      [Title] NVARCHAR(160)  NOT NULL,
      [ArtistId] INTEGER  NOT NULL,
      FOREIGN KEY ([ArtistId]) REFERENCES "artists" ([ArtistId])
                  ON DELETE NO ACTION ON UPDATE NO ACTION
  )
  table|sqlite_sequence|sqlite_sequence|3|CREATE TABLE sqlite_sequence(name,seq)
  table|artists|artists|4|CREATE TABLE "artists"
  (
      [ArtistId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
      [Name] NVARCHAR(120)
  )
  table|customers|customers|5|CREATE TABLE "customers"
  (
      [CustomerId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
      [FirstName] NVARCHAR(40)  NOT NULL,
      [LastName] NVARCHAR(20)  NOT NULL,
      [Company] NVARCHAR(80),
      [Address] NVARCHAR(70),
      [City] NVARCHAR(40),
      [State] NVARCHAR(40),
      [Country] NVARCHAR(40),
      [PostalCode] NVARCHAR(10),
      [Phone] NVARCHAR(24),
      [Fax] NVARCHAR(24),
      [Email] NVARCHAR(60)  NOT NULL,
      [SupportRepId] INTEGER,
      FOREIGN KEY ([SupportRepId]) REFERENCES "employees" ([EmployeeId])
                  ON DELETE NO ACTION ON UPDATE NO ACTION
  )
  table|employees|employees|8|CREATE TABLE "employees"
  (
      [EmployeeId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
      [LastName] NVARCHAR(20)  NOT NULL,
      [FirstName] NVARCHAR(20)  NOT NULL,
      [Title] NVARCHAR(30),
      [ReportsTo] INTEGER,
      [BirthDate] DATETIME,
      [HireDate] DATETIME,
      [Address] NVARCHAR(70),
      [City] NVARCHAR(40),
      [State] NVARCHAR(40),
      [Country] NVARCHAR(40),
      [PostalCode] NVARCHAR(10),
      [Phone] NVARCHAR(24),
      [Fax] NVARCHAR(24),
      [Email] NVARCHAR(60),
      FOREIGN KEY ([ReportsTo]) REFERENCES "employees" ([EmployeeId])
                  ON DELETE NO ACTION ON UPDATE NO ACTION
  )
  table|genres|genres|10|CREATE TABLE "genres"
  (
      [GenreId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
      [Name] NVARCHAR(120)
  )
  table|invoices|invoices|11|CREATE TABLE "invoices"
  (
      [InvoiceId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
      [CustomerId] INTEGER  NOT NULL,
      [InvoiceDate] DATETIME  NOT NULL,
      [BillingAddress] NVARCHAR(70),
      [BillingCity] NVARCHAR(40),
      [BillingState] NVARCHAR(40),
      [BillingCountry] NVARCHAR(40),
      [BillingPostalCode] NVARCHAR(10),
      [Total] NUMERIC(10,2)  NOT NULL,
      FOREIGN KEY ([CustomerId]) REFERENCES "customers" ([CustomerId])
                  ON DELETE NO ACTION ON UPDATE NO ACTION
  )
  table|invoice_items|invoice_items|13|CREATE TABLE "invoice_items"
  (
      [InvoiceLineId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
      [InvoiceId] INTEGER  NOT NULL,
      [TrackId] INTEGER  NOT NULL,
      [UnitPrice] NUMERIC(10,2)  NOT NULL,
      [Quantity] INTEGER  NOT NULL,
      FOREIGN KEY ([InvoiceId]) REFERENCES "invoices" ([InvoiceId])
                  ON DELETE NO ACTION ON UPDATE NO ACTION,
      FOREIGN KEY ([TrackId]) REFERENCES "tracks" ([TrackId])
                  ON DELETE NO ACTION ON UPDATE NO ACTION
  )
  table|media_types|media_types|15|CREATE TABLE "media_types"
  (
      [MediaTypeId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
      [Name] NVARCHAR(120)
  )
  table|playlists|playlists|16|CREATE TABLE "playlists"
  (
      [PlaylistId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
      [Name] NVARCHAR(120)
  )
  table|playlist_track|playlist_track|17|CREATE TABLE "playlist_track"
  (
      [PlaylistId] INTEGER  NOT NULL,
      [TrackId] INTEGER  NOT NULL,
      CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),
      FOREIGN KEY ([PlaylistId]) REFERENCES "playlists" ([PlaylistId])
                  ON DELETE NO ACTION ON UPDATE NO ACTION,
      FOREIGN KEY ([TrackId]) REFERENCES "tracks" ([TrackId])
                  ON DELETE NO ACTION ON UPDATE NO ACTION
  )
  table|tracks|tracks|20|CREATE TABLE "tracks"
  (
      [TrackId]     INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
      [Name]        NVARCHAR(200)  NOT NULL,
      [AlbumId]     INTEGER,
      [MediaTypeId] INTEGER  NOT NULL,
      [GenreId]     INTEGER,
      [Composer]    NVARCHAR(220),
      [Milliseconds] INTEGER  NOT NULL,
      [Bytes]       INTEGER,
      [UnitPrice]   NUMERIC(10,2)  NOT NULL,
      FOREIGN   KEY ([AlbumId]) REFERENCES "albums" ([AlbumId])
                 ON DELETE NO ACTION ON UPDATE NO ACTION,
      FOREIGN   KEY ([GenreId]) REFERENCES "genres" ([GenreId])
                 ON DELETE NO ACTION ON UPDATE NO ACTION,
      FOREIGN   KEY ([MediaTypeId]) REFERENCES "media_types" ([MediaTypeId])
                 ON DELETE NO ACTION ON UPDATE NO ACTION
  )
  table|sqlite_stat1|sqlite_stat1|864|CREATE TABLE sqlite_stat1(tbl,idx,stat)
sqlite>


sqlite> .open c51_langchain-sql-app/chinook.db
sqlite> select * from customers;
sqlite> select LastName from customers;
sqlite> select * from customers where LastName = 'Jones';
        52|Emma|Jones||202 Hoxton Street|London||United Kingdom|N1 5LH|+44 020 7707 0707||emma_jones@hotmail.com|3
sqlite>

sqlite3

 sqlite> .open sqlite-sakila.db   # creates the .db file
 sqlite> .read sqlite-sakila-schema.sql   # creates the database schema
 sqlite> .read sqlite-sakila-insert-data.sql   # inserts the data
 sqlite> SELECT * FROM sqlite_master WHERE type = 'table';

---

I apologize for the misunderstanding. I'm now clear that the issue involves directly using sqlite3 without TypeORM. Here are tailored troubleshooting steps:

1. Path Verification: I've tried multiple paths, they all returnisConnected == true
2. Database Integrity: The db is fine in SQLite viewer
3. Case Sensitivity: The database file name is all lowercase. Given no tables, I'm not even doing a SELECT on a table name
4. Asynchronous Behavior: I used async/await and .then()
5. Error Handling:  That is how I am error the error that no "table names" (rows) are being returned
6. Reinstallation: I have reinstalled SQLite3 and checked the system path.  And I've installed two NodeJS SQLite3 modules
7. Alternative Script: I've thried three alternative scripts
8. Community Support: I haven't done this, but frankly I never get an answer what I do.  You're answers are so much better and faster.



    `# sqlite3 ./assets/chinook.db`

        SQLite version 3.45.1 2024-01-30 16:01:20 (UTF-16 console I/O)
        Enter ".help" for usage hints.
        sqlite> .tables
        albums          employees       invoices        playlists
        artists         genres          media_types     tracks
        customers       invoice_items   playlist_track
        sqlite> .exit


       sqlite> SELECT * FROM sqlite_master WHERE type = 'table';

    `# sqlite3 ./assets/sakila.db`


        actor                   film                    payment
        address                 film_actor              rental
        category                film_category           sales_by_film_category
        city                    film_list               sales_by_store
        country                 film_text               staff
        customer                inventory               staff_list
        customer_list           language                store


       sqlite> SELECT * FROM sqlite_master WHERE type = 'table';

       sqlite> SELECT name FROM sqlite_master where type = "table";

---------------------------------------------------------------------------

  import * as dotenv     from "dotenv"; dotenv.config();
  import { SqlDatabase } from "langchain/sql_db";
  import { DataSource  } from "typeorm";

       var __dirname = import.meta.url.replace( import.meta.url.replace( /.+\//, "/" ), "" ).replace( /file:\/\//, "" ) // .replace( /:/, "" )
       var aAppDir   = __dirname.replace(/\/[Ee]:/, "")

       var aDataFile = `${aAppDir}/assets/chinook.db`

        console.log('\n[11.1]    Loading SQLite3 database: ' + `./assets/chinook.db` );

  const datasource = new DataSource(
         { type: "sqlite"
         , database: aDataFile
           } );

   const db = await SqlDatabase.fromDataSourceParams(
         { appDataSource: datasource
           } );

        console.log( `[11.2]    datasource.isInitialized: ${ datasource.isInitialized }` );

    var aTables = '\n               ' + db.allTables.map( (t) => t.tableName ).join( '\n               ' )
        console.log( `[11.4]    db.allTables.map: ${ aTables }` );

---------------------------------------------------------------------------

Could you rewrite this script to use a MySQL database

  import * as dotenv     from "dotenv"; dotenv.config();
  import { SqlDatabase } from "langchain/sql_db";
  import { DataSource  } from "typeorm";

       var __dirname = import.meta.url.replace( import.meta.url.replace( /.+\//, "/" ), "" ).replace( /file:\/\//, "" ) // .replace( /:/, "" )
       var aAppDir   = __dirname.replace(/\/[Ee]:/, "")

       var aDataFile = `${aAppDir}/assets/chinook.db`

  const datasource = new DataSource(
         { type: "sqlite"
         , database: aDataFile
           } );

   const db = await SqlDatabase.fromDataSourceParams(
         { appDataSource: datasource
           } );

    var aTables = '\n               ' + db.allTables.map( (t) => t.tableName ).join( '\n               ' )
        console.log( `[11.4]    db.allTables.map: ${ aTables }` );

Using these env variables

  host: process.env.MYSQL_HOST,
  user: process.env.MYSQL_USER,
  password: process.env.MYSQL_PASSWORD,
  database: process.env.MYSQL_DATABASE

-------------------------------------------------------


Running this sample code from this page

const datasource = new DataSource({
  type: "sqlite",
  database: "../../../../Chinook.db",
  });
const db = await SqlDatabase.fromDataSourceParams({
  appDataSource: datasource,
  });
const llm = new ChatOpenAI({ temperature: 0 });
const chain = await createSqlQueryChain({
  llm,
  db,
  dialect: "sqlite",
});


import { SqlDatabase } from "langchain/sql_db";
import { DataSource  } from "typeorm";
import { ChatOpenAI  } from "@langchain/openai";
import { createSqlQueryChain } from "langchain/chains/sql_db";

const datasource = new DataSource({
  type: "sqlite",
  database: "./Chinook.db",
  });

const db = await SqlDatabase.fromDataSourceParams({
  appDataSource: datasource,
  });
const llm = new ChatOpenAI( { temperature: 0 } );
const llm = new ChatOpenAI( { modelName: "gpt-3.5-turbo", temperature: 0 } );  // .(40202.01. RAM Was gpt-4)

const chain = await createSqlQueryChain({
  llm,
  db,
  dialect: "sqlite",
  });

const result = await chain.run("How many tracks are there?");

I am getting this error


f
The error is occurring in this file: langchain/core/dist/runnables/passthrough.js

    This runnable behaves almost like the identity function, except that it
     * can be configured to add additional keys to the output, if the input is
     * an object.
     *
     * The example below demonstrates how to use `RunnablePassthrough to
     * passthrough the input from the `.invoke()`

in the class: RunnablePassthrough extends Runnable
on this line:

     static assign(mapping) {
        return new RunnableAssign( new RunnableMap( { steps: mapping } ) );
     }

the variable mapping contains: { input.name: 'input', table_info: 'table_info' }

--------------------------------------------------------------------------------------




