
Bard Question 1
--------------------------------------------------------------------------
Integrate OpenAI GPT3 with a Database
I'm now going to implement this YouTube tutorial: How to integrate OpenAI GPT3 with a Database - Crash Course - https://www.youtube.com/watch?v=N4nX_rTwKx4
https://github.com/adriantwarog/youtube-comments-openai-gpt3.git

Bard Question 2
--------------------------------------------------------------------------
Adrian Twarog's first step was to retreive comments from his YouTube Video.
Our first step connects to a MySQL database. Adrian used the cloud service, SingleStore,
but I used a local MySQL database instead.

     import dotenv from 'dotenv'; dotenv.config()
     import mysql  from 'mysql2/promise';

    //  01. Write main() function which is run at the end
    //----------------------------------------------------
      async function main() {
        var pConnection
        try {
        var pConnection = await mysql.createConnection(
              { host:     process.env.DB2_MYSQL_HOST
              , user:     process.env.DB2_MYSQL_USER
              , password: process.env.DB2_MYSQL_PASSWORD
              , database: process.env.DB2_MYSQL_DATABASE
              , port:     3306 // Default MySQL port
    //        , pool:     true
              } );
            console.log(   `Successful connection to MySQL DB at: ${process.env.DB2_MYSQL_HOST}.`);

        } catch( pErr ) {
            console.log(   `Failed to connect to MySQL DB at: ${process.env.DB2_MYSQL_HOST}.`);
    //      console.error( `ERROR:`,  pErr );
    //      console.error( `ERROR: ${ pErr }` );
            console.error( `ERROR ${-pErr.errno}: ${pErr.message}` );
            process.exit(1);
        } finally {
        if (pConnection) {
            await pConnection.end();
            }
            }
        } // eof main
    //----------------------------------------------------

    //  02. Call main() function
    //----------------------------------------------------
            main()

    //----------------------------------------------------

Bard Question 3
--------------------------------------------------------------------------
I initially created a .env file with the following values

    DB1_MYSQL_HOST     = 'svc-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx-dml.aws-oregon-4.svc.singlestore.com'
    DB1_MYSQL_USER     = 'admin'
    DB1_MYSQL_PASSWORD = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
    DB1_MYSQL_DATABASE = 'singlestore'

    DB2_MYSQL_HOST     = 'xxx.xxx.xxx.xxx';
    DB2_MYSQL_USER     = 'xxxxxxx';
    DB2_MYSQL_PASSWORD = 'xxxxxxxxx';
    DB2_MYSQL_DATABASE = 'comments';

I kept getting this error ERROR ENOTFOUND: getaddrinfo ENOTFOUND '45.32.219.12';
Bard and I spent hours trying to figure out the problem. It seemed like a DNS
name resolution error, which it actually was due to a semi-colon at the end
of the IP Address


Bard Question 4
--------------------------------------------------------------------------
For the next step I added an insert function to append a comment record to the
comments table.  I also wrote a getDBconfig() function to make it easy to switch
databases.

    //  03. Write insert() function to be run inside main
    //----------------------------------------------------
      async function insert( { pConnection, pComment } ) {      // .(40203.02.1 RAM Was create())
        const [ results ] = await pConnection.execute(
    //  const   results   = await pConnection.execute(
                'INSERT INTO comments (commentid, commenter, comment, gpt, flag, respond) VALUES ( ?, ?, ?, ?, ?, ? )'
            , [ pComment.commentid, pComment.commenter, pComment.comment, pComment.gpt, pComment.flag, pComment.respond ]
              );
       return results.insertId;
            }
    //----------------------------------------------------

      async function main() {
        var pConnection
        var pDBconfig = getDBconfig( 'DB3' )                    // .(40203.01.1 RAM Use getDBconfig())

        var pConnection = await mysql.createConnection( pDBconfig )
            console.log( `Successful connection to MySQL DB at: ${pDBconfig.host}.`);

    //  04. Use insert() function inside main
    //----------------------------------------------------
      const id = await insert( { pConnection, pComment:         // .(40203.02.2 RAM Was create())
             { commentid:  1
             , commenter: "Adrian Twarog"
             , comment  : "Why did the database go on a diet? It had too many tables!"
             , gpt      : ""
             , flag     :  0
             , respond  :  0
               }
            } );
            console.log( `Inserted row id: ${id}.` );
            ...
            }

    //  05. Write getDBconfig() function to be run inside main
    //----------------------------------------------------
    function getDBconfig(aDB) {                                 // .(40203.01.2 RAM Write getDBconfig())
        var pCfg =
             { host:     process.env[`${aDB}_MYSQL_HOST`]
             , user:     process.env[`${aDB}_MYSQL_USER`]
             , password: process.env[`${aDB}_MYSQL_PASSWORD`]
             , database: process.env[`${aDB}_MYSQL_DATABASE`]
             , port:     3306 // Default MySQL port
               }
     return pCfg
            };
    //----------------------------------------------------

The result of running the final db.js script is as follows:

    $ node 01_db.js
        Successful connection to MySQL DB at: 127.0.0.1.
        Inserted row id: 1.


Bard Question 5
--------------------------------------------------------------------------
Next we use the Google YouTube API to get the comments for Adrian's
YouTube Video.  We create a project at https://console.cloud.google.com/projectcreate
Then enable the "youtube data api v3" API at: https://console.cloud.google.com/apis/library/browse?q=youtube%20data%20api%20v3
And finally we get an API_KEY for it at: https://console.cloud.google.com/apis/credentials?project=xxxxx-xxxxx-xxxxxx

Here is the script, 02_comments.js

          import   dotenv   from 'dotenv'; dotenv.config()
          import { google } from 'googleapis';

        // 05.1 Write function getYoutubeComments
        // -------------------------------------------------
        var pYouTube = google.youtube(
             { version: 'v3'
             , auth: process.env.GOOGLE_API_KEY
               } );

        async function getYoutubeComments() {
        return new Promise( ( resolve, reject ) => {
            pYouTube.commentThreads.list(
                { part:      'snippet'
                , videoId:   'JTxsNm9IdYU'
                , maxResults: 100 }
             , (err, res) => {
                if ( err ) reject( err );
                   resolve( res.data.items );
                } );
              } );
            } // eof getYoutubeComments
        // -------------------------------------------------

        // 05.2 Run function getYoutubeComments
        // -------------------------------------------------
         var mComments = await getYoutubeComments();
             console.log( `YouTube Comments Found: ${mComments.length}.` );

Here is the result of running it

      $ node 02_comments.js
            YouTube Comments Found: 100.


Bard Question 6
--------------------------------------------------------------------------
Next we change the script that adds one sample comments into a module with an exported function addComments.
This function loops through the comments from the Google API and uses the previously defined insert function
to add them into the MySQL database.  Exporting the function allows it to be used in calling function.

        // 06.1 Change main() into into addComments()) to insert mComments array
        //----------------------------------------------------
          async function addComments( mComments) {
           var pConnection
           var pDBconfig = getDBconfig( 'DB3' )
           try {
           var pConnection = await mysql.createConnection( pDBconfig )
            console.log( `Successful connection to MySQL DB at: ${pDBconfig.host}.`);

        // 06.2 Loop through mComments array calling insert() for each one
        //----------------------------------------------------
           for (let i = 0; i < mComments.length; i++) {
            var pSnippet  =  mComments[i].snippet.topLevelComment.snippet
            var id = await insert( { pConnection, pComment:
                   { commentid: mComments[i].id
                   , commenter: pSnippet.authorDisplayName
                   , comment  : pSnippet.textOriginal
                   , gpt      : ""
                   , flag     : 0
                   , respond  : 0
                     }
                  } );
                console.log( `Inserted row id: ${id} - '${pSnippet.textOriginal.substr(0,50).replace( /\n/g, "<br>" ) }...'` );
                }
            } catch( pErr ) {
                console.log(   `Failed to connect to MySQL DB at: ${pDBconfig.host}.`);
                console.error( `ERROR ${-pErr.errno}: ${pErr.message}` );
                process.exit(1);
            } finally {
            if (pConnection) {
                await pConnection.end();
                }
              } // eof finally
            } // eof addComments
        //----------------------------------------------------

        // 06.3 Export addComments() function
        //----------------------------------------------------
         export default addComments                                 // .(40204.07.2 RAM Export addComments())
        //----------------------------------------------------

The addComments function is imported and ecexuted from a parent script, along with an exported
function, addComments

        // 06.5 Import two modules
        //----------------------------------------------------------
         import   addComments   from './01_db_v07-addComments.mjs'
         import   getComments   from './02_comments_u03-module.mjs'

        // 06.6 Get and add comments to database
        //----------------------------------------------------------
            var mComments = await getComments()
          await addComments( mComments )


Bard Question 7 -- Test OpenAi API
--------------------------------------------------------------------------
Now for the good part, passing the comments to an OpenAI model in order to
determine if the comments needs to be responded to.  After getting an API_KEY
from OpenAI, this script runs a simple test to see if we can submit a prompt
to the model.

         import dotenv from 'dotenv'; dotenv.config()
         import { Configuration, OpenAIApi } from "openai";

        // 09.1 Set OpenAI API_KEY
        // -------------------------------------------------
            var pConfiguration = new Configuration(
                 { apiKey      : process.env.OPENAI_API_KEY
        //       , organization: process.env.OPENAI_ORG
                   } );

        // 09.2 Run test of OpenAI createCompletion
        // -------------------------------------------------
            var pOpenAI = new OpenAIApi( pConfiguration );
            var pResponse  = await pOpenAI.createCompletion(
                { model       : "davinci-002"                               // .(40204.9.2 RAM Deprecated: text-davinci-003)
                , prompt      : "Say this is a test"
                , max_tokens  :  7
                , temperature :  0
                  } );

                console.log( pResponse.data.choices[0].text );


Bard Question 8 - Explain prompt submitted for each comment
--------------------------------------------------------------------------
This script creates a funtion that loops through an array of comments submitting each one to the OpenAI LLM model with a prompt
containing two "Context examples" and a third "Actual use case" with the comment. Could you explain how this prompt
causes the model to know whether to return "Should Reply as "Yes" or "No" as a response. If the response is "Yes" then
the function updates the "Respond "comment record

        import dotenv from 'dotenv'; dotenv.config()
        import { Configuration, OpenAIApi } from "openai";
        import doComments from './01_db_u03-module.mjs'    // .(40204.07.11 RAM New module)

        // 09.1 Set OpenAI API_KEY
        // -------------------------------------------------
        var pConfiguration = new Configuration(
                 { apiKey      : process.env.OPENAI_API_KEY
        //       , organization: process.env.OPENAI_ORG
                   } );
            var pOpenAI        =  new OpenAIApi( pConfiguration );

        // 09.3 Write function updateDatabaseUsingGPT
        // -------------------------------------------------
        async function updateDatabaseUsingGPT( ) {

            var mComments = await doComments( 'select' );

                console.log( `Processing ${mComments.length} comments.` )
           try {
           for (var i = 0; i < mComments.length; i++) {

                var aPrompt = `The following AI tool helps YouTubers identify if a comment can should be replied to or not.\n`
                            + `Questions and/or asking for advice are good examples of when a reply is needed.\n\n`
                            // Context Example 1
                            + `User: John Smith\n`
                            + `Comment: That was a great video, thanks!\n`
                            + `Should Reply: No\n\n`

                            // Context Example 2
                            + `User: Sue Mary\n`
                            + `Comment: I'm stuck on step four, how do I do it?\n`
                            + `Should Reply: Yes\n\n`

                            // Actual use case
                            + `User: ${mComments[0].commenter}\n`
                            + `Comment: ${mComments[i].comment}\n`
                            + `Should Reply:  `

                var pResponse = await pOpenAI.createCompletion(
                     { model : "davinci-002"   // .(40204.09.1 RAM Deprecated: text-davinci-003)
                     , prompt:  aPrompt
                    , stop: [ "\n", "User:", "Comment:", "Should Reply:" ]
                    , max_tokens:  7
                    , temperature: 0
                      } );

                var aResponse = pResponse.data.choices[0].text.trim()
                    console.log( `Comment Id ${mComments[i].id} response: ${aResponse}` );

                if (aResponse == "Yes") {

              await doComments( 'update',[ mComments[i].id ] );
                    console.log( `Comment Id ${mComments[i].id} updated` )
                    } // if comment respond = "Yes"

                } // eol for each mComments

            } catch( pErr ) {
                console.log(   `Failed to process pOpenAI.createCompletion`);
                console.error( `ERROR ${-pErr.errno}: ${pErr.message}` );
                process.exit(1);
            } finally {
                process.exit()
                }
            } // eof updateDatabaseUsingGPT
        // --------------------------------------------------------

        // 09.4 Run updateDatabaseUsingGPT
        // -------------------------------------------------

                updateDatabaseUsingGPT();


Bard Question 9 - Run OpenAI API for each comment
--------------------------------------------------------------------------
When I run the script above, it display a reposponse for five comments, then it fails with
a statuscode of 429.  I believe this has something to do with the quota for the number of
times that I can query the OpenAI model.  Can yo tell me how I can increase the quota for
a free account so that I can run 100 comments against the model.

        User:      @AdrianTwarog
        Comment: ? Try the OpenAI Template - Starter Kit I've made (by Adrian (me!!!))?
                   https://enhanceui.gumroad.com/l/chatgpt-starter-template
                   This is new and ready for those looking to kickstart their own app or website
                   using the OpenAI GPT models. I've built it on MERN it should save you over 100 hours
                   if you want to build or test your own ideas! This also supports the channel
                   if you have found these videos of benefit!
        Should Reply:'
        Comment Id 1419 response: No
        Comment Id 1420 response: Yes
        Comment Id 1420 updated
        Comment Id 1421 response: Yes
        Comment Id 1421 updated
        Comment Id 1422 response: No
        Comment Id 1423 response: No
        Failed to process pOpenAI.createCompletion
        ERROR NaN: Request failed with status code 429
        Process exited with code 1

--------------------------------------------------------------------------
Does this use case need the davinci-002 model.  Is there a less expensive model that I can use.
Where and/or how can i find out how many times I can submit a prompt against any give OpenAI model.

--------------------------------------------------------------------------
I have only used .11 cents of my $5 quota, but I am getting a Request failed with status code 429 after submitting 3 or 4 api requests

Thanks for sharing the details and reporting the bug! A member of our team will follow-up with you as soon as possible.

Hi there, Sorry you're running into issues regarding rate limits! Rate limits, which are restrictions
we place on the number of API calls you can make, exist so we can make sure everyone has fair access
to the API. If you're bumping up against these limits, here are some strategies you might try: Reduce
max_tokens : Reducing max_tokens to match the size of your completions. Since max_tokens factor into
your rate limit calculation, this adjustment might resolve the issue if your Current tokens used are
exceeding your token Limit. Optimize Your Requests: Batch requests and employ strategies like exponential
backoff along with other error mitigation tactics. Wait for 48 Hours: If you're a new pay-as-you-go user,
be aware that we place daily rate limits during the first 48 hours. More details on your specific rate
limits can be found here. Check Your Quota: Ensure you're not exceeding your monthly spending quota.
If you need adjustments, you can do so through the quota increase form. Ensure you're on our
Pay-As-You-Go-Plan: Update your billing with credit card details for the API Platform (not ChatGPT) here.
Explore (or free trial users) are heavily restricted, regardless if you already have credits or grants in
your account. Still encountering issues? You can request a rate limit increase by filling out our Rate
Limit Increase form. Please note that this applies only to certain models, as gpt-4 and gpt-3.5-turbo-16k
are currently capacity constrained and we can't offer increases today. If these steps don't resolve your
issue, please provide more details, and I'll be glad to assist you further. Best,

OpenAI Team


--------------------------------------------------------------------------
I visited this page: https://platform.openai.com/account/limits and it seems that most models have a
3 RPM (requests per minute).  So can you write a bit of code that will throttle my requests
var pResponse = await pOpenAI.createCompletion( pRequest).  My pRequest has max_tokens: 7.  Does that
affect how many requests I can make?


const wait = require("util").promisify(setTimeout); // Import for throttling
import { promisify } from "util"; const wait = promisify(setTimeout);

// ... other code

async function throttledCreateCompletion( pRequest, nWaitSecs ) {
  const startTime   = Date.now();
  const response    = await pOpenAI.createCompletion( pRequest );
  const elapsedTime = Date.now() - startTime;
  const waitTime    = Math.max( 0, (nWaitSecs * 1000) - elapsedTime); // Wait at least 1 second
  await wait( waitTime );
  return response;
  }

async function updateDatabaseUsingGPT() {
  // ... other code (fetch comments, etc.)

  for (const comment of mComments) {
    // Construct your prompt here

    try {
      const response = await throttledCreateCompletion( pRequest );
      // ... process response

    } catch (error) {
      // Handle errors appropriately
    }
  }
}

// ... call updateDatabaseUsingGPT()
